import { createAsyncThunk } from "@reduxjs/toolkit";
import { toast } from "react-toastify";
import { gloriaAPI } from "../auth/operations";

// ‚ûï –î–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–æ–¥–Ω–µ –∞–±–æ –∫—ñ–ª—å–∫–∞)
export const uploadGalleryImages = createAsyncThunk(
	"gallery/uploadImages",
	async ({ type, files }: { type: string; files: File[] }, thunkAPI) => {
		try {
			const formData = new FormData();
			files.forEach((file) => formData.append("imgs", file)); // üëà –±–µ–∫–µ–Ω–¥ –æ—á—ñ–∫—É—î imgs[]

			const res = await gloriaAPI.patch(`/gallery/${type}`, formData, {
				headers: { "Content-Type": "multipart/form-data" },
			});
			// console.log("RESPONSE", res.data.data);

			toast.success("–§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ ‚úÖ");
			return res.data.data;
		} catch (err) {
			const message = (err as Error)?.message || "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫";
			toast.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ ‚ùå");
			return thunkAPI.rejectWithValue(message);
		}
	}
);

// ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
export const deleteGalleryImage = createAsyncThunk(
	"gallery/deleteImage",
	async ({ type, imageUrl }: { type: string; imageUrl: string }, thunkAPI) => {
		try {
			await gloriaAPI.delete(`/gallery/${type}/image`, {
				data: { url: imageUrl },
			});
			toast.success("–§–æ—Ç–æ –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ");
			return { type, imageUrl };
		} catch (err) {
			const message = (err as Error)?.message || "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫";
			toast.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ ‚ùå");
			return thunkAPI.rejectWithValue(message);
		}
	}
);

// üì¶ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å
export const getGallery = createAsyncThunk(
	"gallery/getAll",
	async (_, thunkAPI) => {
		try {
			const res = await gloriaAPI.get("/gallery");
			return res.data.data;
		} catch (err) {
			// @ts-expect-error TS is not sure about error structure
			const message = err?.message || "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫";
			toast.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≥–∞–ª–µ—Ä–µ—é ‚ùå");
			return thunkAPI.rejectWithValue(message);
		}
	}
);
